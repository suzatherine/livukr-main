:: StoryTitle
Investigation Ground University 


:: StoryData
{
	"ifid": "C3A16691-C05E-47CA-B8E6-A1CC8346BED9",
	"format": "SugarCube",
	"format-version": "2.36.1",
	"start": "landing",
	"zoom": 0.6
}


:: Story Stylesheet [stylesheet]
@import url("https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300;400;600&display=swap");

@import url("./styles/generics.css");
@import url("./styles/styles.css");



:: Story JavaScript [script]
$('#ui-bar').remove();
$(document.head).find('#style-ui-bar').remove();



// MAKE MAP FUNCTION

setup.generateDirectionsMap = function (latorg, longorg, latdest, longdest){
const iFrame = document.createElement("iframe")
iFrame.classList.add("map")
iFrame.setAttribute("loading", "lazy")
iFrame.setAttribute("referrerpolicy", "no-referrer-when-downgrade")
// iFrame.setAttribute("allowfullscreen")
iFrame.setAttribute("src", `https://www.google.com/maps/embed/v1/directions?key=AIzaSyBDRwRTMpSybNcmgkYVX1yZ0YmBbNhs9qU&center=${latorg},${longorg}&zoom=17&origin=${latorg},${longorg}&destination=${latdest},${longdest}&mode=walking`)
const mount = document.getElementById("mapMount")
return iFrame
}

// TOUCHEVENTS 
// taken from https://developer.mozilla.org/en-US/docs/Web/API/Touch_events  
setup.startup = () =>  {
  const ongoingTouches = [];
  console.log(ongoingTouches)

const handleStart = (evt) =>{
  evt.preventDefault();
  // log("touchstart.");
  const initial = document.getElementById("initial");
  const stat = document.getElementById("stat");
    const reveal = document.getElementById("reveal");
    //  reveal.classList.add("transparent");  
     initial.classList.add("transparent");  
     console.log(reveal)
//       setTimeout(() => {
//     initial.classList.add("hide"); 
// }, "1000");
   
//   initial.classList.add("dissolve");  
//    stat.classList.add("appear"); 
//   setTimeout(() => {
//     initial.classList.add("hide"); 
//   // stat.classList.add("dissolve"); 
//   // reveal.classList.add("dissolve"); 
// }, "5000");
//  setTimeout(() => {
//     // initial.classList.add("hide"); 
//   stat.classList.add("hide"); 
//   // reveal.classList.add("dissolve"); 
// }, "6000");
  // el.classList.remove("hide"); 
  
}

const handleMove = (evt) => {
  evt.preventDefault();
  
}

const handleEnd = (evt) => {
  evt.preventDefault();
  // log("touchend");
   const initial = document.getElementById("initial");
    const reveal = document.getElementById("reveal");
    //  initial.classList.remove("hide"); 
     initial.classList.remove("transparent");  
  // initial.classList.remove("hide")  
  //   reveal.classList.add("hide");  
  
}

const handleCancel = (evt) => {
  evt.preventDefault();
  // log("touchcancel.");
  const touches = evt.changedTouches;

  for (let i = 0; i < touches.length; i++) {
    let idx = ongoingTouchIndexById(touches[i].identifier);
    ongoingTouches.splice(idx, 1); // remove it; we're done
  }
}

function colorForTouch(touch) {
  // let r = touch.identifier % 16;
  // let g = Math.floor(touch.identifier / 3) % 16;
  // let b = Math.floor(touch.identifier / 7) % 16;
  // r = r.toString(16); // make it a hex digit
  // g = g.toString(16); // make it a hex digit
  // b = b.toString(16); // make it a hex digit
  // const color = `#${r}${g}${b}`;
    const color = `#666`;
  return color;
}


function copyTouch({ identifier, pageX, pageY }) {
  return { identifier, pageX, pageY };
}
function ongoingTouchIndexById(idToFind) {
  for (let i = 0; i < ongoingTouches.length; i++) {
    const id = ongoingTouches[i].identifier;

    if (id === idToFind) {
      return i;
    }
  }
  return -1; // not found
}

function log(msg) {
  const container = document.getElementById("log");
  container.textContent = `${msg} \n${container.textContent}`;
}

    const el = document.getElementById("initial");
  el.addEventListener("touchstart", handleStart);
  el.addEventListener("touchend", handleEnd);
  el.addEventListener("touchcancel", handleCancel);
  // el.addEventListener("touchmove", handleMove);
  // log("Initialized.", el);
}

// document.addEventListener("DOMContentLoaded", startup);

// AUDIO CONTROLS
// CAPTIONS
setup.addCaptions = (cuekey) =>  {
    const audio = document.getElementById("audio");
     const track = audio.addTextTrack('subtitles', 'English', 'en');
    track.mode = 'showing';
    const cues = {
      
      mixtape: [[10.2,13.866,"Musician Stas Kononov continues to volunteer,"],[13.891,17.266,"distributing supplies to civilians and soldiers."],[17.291,22.49,"It is on the frontline, he begins to play again - concerts for the army."],[22.515,26.856,"Acoustic sounds, songs from his album he is yet to release"],[26.881,30.589,"and music he recorded in a legendary studio in Izium"],[30.614,35.156,"that has now been completely destroyedâ€¦"],[35.17,36.17,""]]}
    for (let i=0; i<cues[cuekey].length; i++){
    const cue = new VTTCue(cues[cuekey][i][0],cues[cuekey][i][1],cues[cuekey][i][2]);
    track.addCue(cue); 
}
    track.addEventListener('cuechange', () => {
    const activeCue = track.activeCues[0];
    if (activeCue) {
      document.getElementById('caption').textContent = activeCue.text;
    }
  });
  console.log(audio.track)

  const hideCap = () => {

     track.mode = 'hidden';
    document.getElementById("caption").style.visibility = "hidden";
  }

 
}

setup.play = () => {
 const audio = document.getElementById("audio")
 audio.play();
  }

setup.pause = () => {
 const audio = document.getElementById("audio")
 audio.pause();
  }

setup.showCap = () => {
    const track = document.getElementById("captrack")
    console.log(track)
track.mode = 'showing';
    document.getElementById("caption").style.visibility = "visible";
  }

setup.hideCap = () => {
    const track = document.getElementById("captrack")
   track.mode = 'hidden';
    document.getElementById("caption").style.visibility = "hidden";
  }

setup.addThirty = () => {
  const audio = document.getElementById("audio")
  const timeHolder = audio.currentTime;
  audio.currentTime = timeHolder +30;  
  }


setup.backThirty = () => {
  const audio = document.getElementById("audio");
  const timeHolder = audio.currentTime;
  audio.currentTime = timeHolder -30;
  }




:: StoryInit {"position":"100,100","size":"100,100"}



:: header [nobr]{"position":"100,225","size":"100,100"}
<header>
<div class="header-item"></div>
<div class="header-item">
  <h1>$title</h1>
  <h3 class="subtitle">With Fire & Rage</h3>
</div >
</header>


:: footer [nobr]{"position":"100,375","size":"100,100"}
<footer>
<<if $showBackwards is true>>
  <div class="nav-wrapper">
    <div class="nav-item">
        [img[Back|assets/img/backward.png][$prevpass]]
    </div>
  </div>
  <</if>>

  <<if $showMap is true>>
    <div class="nav-wrapper">
      <div class="nav-item">
    <<link [img[assets/img/map.png]]>><<toggleclass "#map" "hide">><</link>>
    </div>
  </div>
  <</if>>
  <<if $showAudio is true>>
   <div class="nav-wrapper">
    <div class="nav-item">
 <<link [img[assets/img/play.png]]>><<replace "#audio">><p>[audio playing...]</p><</replace>><</link>>
   </div>
  </div>
  <</if>>
    <<if $showReplay is true>>
     <div class="nav-wrapper">
    <div class="nav-item">
    [img[Replay|assets/img/replay.png][$passage]]
    </div>
    </div>
    <</if>>

     <<if $showCaptionsIcon is true>>
     <div class="nav-wrapper">
    <div class="nav-item">
  <<link [img[assets/img/captions.png]]>><<set $captions to !$captions>><<goto $passage>><</link>>
    </div>
    </div>
    <</if>>

<<if $showForwards is true>>
    <div class="nav-wrapper">
    <div class="nav-item">
         [img[Forward|assets/img/forward.png][$nextpass]]
    </div>
  </div>
     <</if>>
</footer>

:: footerstory [nobr]

<footer>

<<if $showCaptionsIcon is true>>
<div class="nav-wrapper">
    <div class="nav-item">
      <<link [img[assets/img/captions.png]]>>
      <<if $captionToggle is true>>
          <<set $captionToggle to false>>
      <<set $fn to setup.hideCap()>>
          <<else>>
          <<set $captionToggle to true>>
      <<set $fn to setup.showCap()>>
        <</if>>
      <</link>>
</div>
  </div>
<</if>>


<div class="nav-wrapper">
  <div class="nav-item">
    <<link "-30s">>
<<set $fn to setup.backThirty()>>
  <</link>>
  </div>
</div>

<div class="nav-wrapper playpause-wrapper">
  <div class="nav-item" id="playpause">
      <<link [img[assets/img/playpause.png]]>>
        <<if $playToggle is false>>
      <<set $fn to setup.play()>>
      <<set $playToggle to true>>
      <<addclass "#playpause" "playhighlight">>
      <<else>>
       <<set $fn to setup.pause()>>
        <<set $playToggle to false>>
      <<removeclass "#playpause" "playhighlight">>
      <</if>>
      <</link>>
  </div>
</div>

<div class="nav-wrapper">
  <div class="nav-item">
    <<link "+30s">>
      <<set $fn to setup.addThirty()>>
  <</link>>
  </div>
</div>

<div class="nav-wrapper">
  <div class="nav-item">
  <<link [img[assets/img/transcript.png]]>>
<<if $transcript is false>>
  <<set $transcript to true>>
  <<replace "#transcript">>
    <<include "audiotranscript">>
  <</replace>>
  <<else>>
  <<set $transcript to false>>
  <<replace "#transcript">>
  <</replace>>
  <</if>>
  <</link>>
  </div>
</div>

</footer>


:: audiotranscript
Lorem ipsum dolor sit amet consectetur, adipiscing elit gravida aenean venenatis, habitasse dictumst tempor nulla. Vivamus fames sapien aliquet torquent leo inceptos est, volutpat fusce turpis commodo varius nulla eget risus, condimentum consequat tempor ut pellentesque sociis. Metus netus sapien enim sollicitudin at tempus dictumst rutrum sociis, magnis bibendum dui suscipit augue ornare lectus per, pretium imperdiet erat platea accumsan magna nascetur ridiculus.


:: footerback [nobr]{"position":"100,375","size":"100,100"}
<footer>
  <div class="nav-wrapper">
    <div class="nav-item">
        [img[Back|assets/img/backward.png][$prevpass]]
    </div>
  </div>
  <div class="nav-wrapper">
 
  </div>
  
</footer>




:: landing [nobr] {"position":"700,175","size":"100,100"}
<<set $passage to "landing">>
<<set $showMap to false>>
<<set $showAudio to false>>
<<set $showReplay to false>>
<<set $showForwards to false>>
<<set $showBackwards to false>>
<<set $showCaptionsIcon to false>>
<<set $currentLocation to "Karazin National University - Outside">>
<main class="landing">

<p>Stand in front of x</p>
<p>Hold up your phone and rotate in a circle</p>

<div class="nav-wrapper">
<<button "Show Me">><<goto "360">><</button>>
</div>

</main>


:: 360[nobr] {"position":"700,425","size":"100,100"}
<<set $passage to "360">>
<main>
/* Karazin National University - Outside */
<iframe width="90%" height="500px" allowFullScreen="true" allow="accelerometer; magnetometer; gyroscope" style="display:block; margin:20px auto; border:0 none; max-width:880px;border-radius:8px; box-shadow: 0 1px 1px rgba(0,0,0,0.11),0 2px 2px rgba(0,0,0,0.11),0 4px 4px rgba(0,0,0,0.11),0 6px 8px rgba(0,0,0,0.11),0 8px 16px rgba(0,0,0,0.11);" src="https://panoraven.com/en/embed/rEqMkaylCF"></iframe>

<p>Please tap the arrow symbols (in the bottom right corner) to toggle fullscreen mode</p>
</main>
<<include "footer360">>

:: footer360 [nobr]{"position":"100,375","size":"100,100"}
<footer class="">
    <div class="nav-wrapper">
    <div class="nav-item">
       <a href="./../map.html"><button>Back to Map</button></a>
    </div>
  </div>
</footer>










