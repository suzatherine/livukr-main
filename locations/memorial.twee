:: StoryTitle
Investigation Ground Memorial


:: StoryData
{
	"ifid": "C3A16691-C05E-47CA-B8E6-A1CC8341BED9",
	"format": "SugarCube",
	"format-version": "2.36.1",
	"start": "AR",
	"zoom": 0.6
}


:: Story Stylesheet [stylesheet]
@import url("https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300;400;600&display=swap");

@import url("./styles/generics.css");
@import url("./styles/styles.css");



:: Story JavaScript [script]
$('#ui-bar').remove();
$(document.head).find('#style-ui-bar').remove();



// MAKE MAP FUNCTION

setup.generateDirectionsMap = function (latorg, longorg, latdest, longdest){
const iFrame = document.createElement("iframe")
iFrame.classList.add("map")
iFrame.setAttribute("loading", "lazy")
iFrame.setAttribute("referrerpolicy", "no-referrer-when-downgrade")
// iFrame.setAttribute("allowfullscreen")
iFrame.setAttribute("src", `https://www.google.com/maps/embed/v1/directions?key=AIzaSyBDRwRTMpSybNcmgkYVX1yZ0YmBbNhs9qU&center=${latorg},${longorg}&zoom=17&origin=${latorg},${longorg}&destination=${latdest},${longdest}&mode=walking`)
const mount = document.getElementById("mapMount")
return iFrame
}

// TOUCHEVENTS 
// taken from https://developer.mozilla.org/en-US/docs/Web/API/Touch_events  
setup.startup = () =>  {
  const ongoingTouches = [];
  console.log(ongoingTouches)

const handleStart = (evt) =>{
  evt.preventDefault();
 const initial = document.getElementById("initial");
const reveal = document.getElementById("reveal");
     initial.classList.add("transparent");  
     reveal.classList.remove("transparent");  
}

const handleMove = (evt) => {
  evt.preventDefault();
  
}

const handleEnd = (evt) => {
  evt.preventDefault();
  // log("touchend");
  //  const initial = document.getElementById("initial");
  //   const reveal = document.getElementById("reveal");
  //   //  initial.classList.remove("hide"); 
  //    initial.classList.remove("transparent");  
  
}

const handleCancel = (evt) => {
  evt.preventDefault();
  // log("touchcancel.");
  const touches = evt.changedTouches;

  for (let i = 0; i < touches.length; i++) {
    let idx = ongoingTouchIndexById(touches[i].identifier);
    ongoingTouches.splice(idx, 1); // remove it; we're done
  }
}

function colorForTouch(touch) {
  // let r = touch.identifier % 16;
  // let g = Math.floor(touch.identifier / 3) % 16;
  // let b = Math.floor(touch.identifier / 7) % 16;
  // r = r.toString(16); // make it a hex digit
  // g = g.toString(16); // make it a hex digit
  // b = b.toString(16); // make it a hex digit
  // const color = `#${r}${g}${b}`;
    const color = `#666`;
  return color;
}


function copyTouch({ identifier, pageX, pageY }) {
  return { identifier, pageX, pageY };
}
function ongoingTouchIndexById(idToFind) {
  for (let i = 0; i < ongoingTouches.length; i++) {
    const id = ongoingTouches[i].identifier;

    if (id === idToFind) {
      return i;
    }
  }
  return -1; // not found
}

function log(msg) {
  const container = document.getElementById("log");
  container.textContent = `${msg} \n${container.textContent}`;
}

    const el = document.getElementById("initial");
  el.addEventListener("touchstart", handleStart);
  el.addEventListener("touchend", handleEnd);
  el.addEventListener("touchcancel", handleCancel);
  // el.addEventListener("touchmove", handleMove);
  // log("Initialized.", el);
}

// document.addEventListener("DOMContentLoaded", startup);

// AUDIO CONTROLS
// CAPTIONS


setup.play = () => {
 const audio = document.getElementById("audio")
 audio.play();
  }

setup.pause = () => {
 const audio = document.getElementById("audio")
 audio.pause();
  }

setup.showCap = () => {
    const track = document.getElementById("captrack")
    console.log(track)
track.mode = 'showing';
    document.getElementById("caption").style.visibility = "visible";
  }

setup.hideCap = () => {
    const track = document.getElementById("captrack")
   track.mode = 'hidden';
    document.getElementById("caption").style.visibility = "hidden";
  }

setup.addThirty = () => {
  const audio = document.getElementById("audio")
  const timeHolder = audio.currentTime;
  audio.currentTime = timeHolder +30;  
  }


setup.backThirty = () => {
  const audio = document.getElementById("audio");
  const timeHolder = audio.currentTime;
  audio.currentTime = timeHolder -30;
  }




:: StoryInit {"position":"100,100","size":"100,100"}
<<cacheaudio "badjoke" "https://youhavefoundconey.net/CG/what/assets/audio/badjoke.mp3">>
<<waitforaudio>>



:: headerAR [nobr]{"position":"100,225","size":"100,100"}

<header class="ar" >
 <div class="nav-wrapper">
    <div class="nav-item">
  <h2>$ARtitle</h2>
 </div>
 </div>
 <div class="nav-wrapper">
    <div class="nav-item">
    <p class="comment">Press the photo <br> to see it transform</p>
    </div>
    </div>
    
</header>



:: audiotranscript
Lorem ipsum dolor sit amet consectetur, adipiscing elit gravida aenean venenatis, habitasse dictumst tempor nulla. Vivamus fames sapien aliquet torquent leo inceptos est, volutpat fusce turpis commodo varius nulla eget risus, condimentum consequat tempor ut pellentesque sociis. Metus netus sapien enim sollicitudin at tempus dictumst rutrum sociis, magnis bibendum dui suscipit augue ornare lectus per, pretium imperdiet erat platea accumsan magna nascetur ridiculus.


:: footerback [nobr]{"position":"100,375","size":"100,100"}
<footer>
  <div class="nav-wrapper">
    <div class="nav-item">
        [img[Back|assets/img/backward.png][$prevpass]]
    </div>
  </div>
  <div class="nav-wrapper">
 
  </div>
  
</footer>






:: AR [nobr]{"position":"450,50","size":"100,100"}
/* Drobitsky Yar Holocaust Memorial */
<<set $prevpass to "AR">>
<<set $passage to "AR">>
<<set $nextpass to "AR">>
<<set $showMap to false>>
<<set $showAudio to false>>
<<set $showReplay to true>>
<<set $showBackwards to true>>
<<set $showForwards to true>>
<<set $showCaptionsIcon to false>>
<<set $transcript to false>>
<<set $ARtitle to "Drobitsky Yar Holocaust Memorial">>
<<set $transcriptname to  "ARtranscript">>
 /* <<audio ":all" stop>><<audio "5" play>> */
<<include "headerAR">>
/* OPEN */
<main class="ar">

   <div class="ar-imgs-container one" id="ARContainer">
      <div class="hidden-img-wrapper touch transparent" id="reveal" >
          <img src="./assets/img/drob2.jpeg" class="">
        </div>
      <div class="ar-img-wrapper touch bottom" id="initial" >
        <img src="./assets/img/drob1.jpeg" class="">
        </div>
    </div>

<div id="transcript"></div>

</main>
<<include "footerAR">>
<<done>><<set $s to setup.startup()>><</done>>

:: ARtranscript
The Drobitsky Yar Holocaust Memorial, commemorates where an estimated 15,000 Jews, were killed during World War II. 

The memorialâ€™s most prominent feature, a giant black menorah, was severely damaged due to rocket attacks.

It is one of many Jewish memorials and religious sights that have been damaged by Russia. 


:: footerAR [nobr]{"position":"100,375","size":"100,100"}
<footer class="ar">
  <div class="nav-wrapper">
    <div class="nav-item">
       <a href="./../map.html"><button>Back to Map</button></a>
    </div>
    </div>
   <div class="nav-wrapper">
  <div class="nav-item">
  <<link [img[assets/img/transcript.png]]>>
<<if $transcript is false>>
  <<set $transcript to true>>
  <<replace "#transcript">>
    <<include $transcriptname>>
  <</replace>>
  <<else>>
  <<set $transcript to false>>
  <<replace "#transcript">>
  <</replace>>
  <</if>>
  <</link>>
  </div>
</div>
 /* <<if $showReplay is true>>
     <div class="nav-wrapper">
    <div class="nav-item">
    [img[Replay|assets/img/replay.png][$passage]]
    </div>
    </div>
    <</if>> */
   
  
</footer>








